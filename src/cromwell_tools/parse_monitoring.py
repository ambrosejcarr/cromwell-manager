import os
from collections import namedtuple, defaultdict
from google.cloud import storage


# todo refactor this module into a class
def parse_task_log(log):
    """ identify allocated and used memory and disk space within a cromwell task

    :param [str] log: output generated by monitoring.sh script un via cromwell
      on a google compute VM. Most often called 'monitoring.log', and found in
      a task's cromwell directory within cromwell executions.
    :return int memory_usage: maximum memory usage within task
    :return int total_memory: memory allocated for task
    :return bool robust_memory_estimate: True if there were 5 or more estimates of
      the memory usage across the task's run.
    :return int disk_usage: maximum disk usage within task
    :return int total_disk: disk space allocated for task
    :return bool robust_disk_estimate: True if there were 5 or more estimates of
      the disk usage across the task's run.

    """
    total_memory = None
    total_disk = None
    memory_usage = []
    disk_usage = []
    for line in log:
        if line.startswith('Total Memory:'):
            total_memory = int(line.split()[-1])
        elif line.startswith('Total Disk space:'):
            total_disk = int(line.split()[-1])
        elif line.startswith('* Memory usage (MB):'):
            memory_usage.append(int(line.split()[-1]))
        elif line.startswith('* Disk usage (KB):'):
            disk_usage.append(int(line.split()[-1]))
    robust_disk_estimate = len(disk_usage) >= 5
    robust_memory_estimate = len(memory_usage) >= 5

    return (
        max(memory_usage), total_memory, robust_memory_estimate,
        max(disk_usage), total_disk, robust_disk_estimate,
    )


def iter_matching_google_files(google_storage_prefix, suffix):
    """iterate over files matching a google_storage prefix and suffix

    :param str google_storage_prefix:
    :param str suffix:
    :return Iterator: (str name, str line_data)
    """

    # parse a cromwell root for files
    client = storage.Client()
    _, _, bucket, *pseudo_dirs = google_storage_prefix.split('/')
    search_prefix = '/'.join(pseudo_dirs)
    validated_bucket = client.get_bucket(bucket)
    for blob in validated_bucket.list_blobs():
        if blob.name.startswith(search_prefix) and blob.name.endswith(suffix):
            data = blob.download_as_string().decode().split('\n')
            yield blob.name, data


def iter_matching_local_files(search_dir, suffix):
    """

    :param str search_dir:
    :param str suffix:
    :return Iterator: (str name, str line_data)
    """
    for root, dirs, files in os.walk(search_dir):
        for file in files:
            if file.endswith(suffix):
                filename = os.path.join(root, file)
                with open(filename, 'r') as f:
                    data = f.readlines()
                yield filename, data


def parse_all_tasks(cromwell_root):
    """parse all tasks in a cromwell root directory.

    :param str cromwell_root: google storage endpoint of path or local directory
    :return dict parsed_tasks: dictionary of tasks and their memory usage
    """
    # create some simple storage objects
    MemoryUtilization = namedtuple('MemoryUtilization', ('total', 'used', 'robust'))
    DiskUtilization = namedtuple('DiskUtilization', ('total', 'used', 'robust'))

    log_name = 'monitoring.log'
    if cromwell_root.startswith('gs://'):
        log_iterator = iter_matching_google_files(cromwell_root, log_name)
    else:
        log_iterator = iter_matching_local_files(cromwell_root, log_name)

    task_memory_utilization = {}
    task_disk_utilization = {}
    for name, data in log_iterator:
        used_memory, total_memory, robust_memory, used_disk, total_disk, robust_disk = (
            parse_task_log(data))
        task_disk_utilization[name] = DiskUtilization(total_disk, used_disk, robust_disk)
        task_memory_utilization[name] = MemoryUtilization(total_disk, used_disk, robust_disk)

    return task_memory_utilization, task_disk_utilization


def aggregate_runs(cromwell_runs):
    """aggregate utilization information from multiple cromwell runs

    :param list cromwell_runs: root directories for multiple cromwell runs
    :return dict:
    """
    task_results = defaultdict(dict)
    for root in cromwell_runs:
        memory_results, disk_results = parse_all_tasks(root)
        task_results[root]['memory'] = memory_results
        task_results[root]['disk'] = disk_results
